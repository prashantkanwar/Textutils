{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","to","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","Text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capatialize","msg","About","classNameName","prototype","PropTypes","string","App","mode","setMode","setAlert","exact","path","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b8393048.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className= {`navbar navbar-expand-lg navbar-$(props.mode) bg-$(props.mode)`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n              </li>\r\n              \r\n              \r\n            </ul>\r\n            <div className={`form-check form-switch text-$(props.mode==='light'? 'dark':'light')`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {title: PropTypes.string}","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpCase = () => {\r\n        console.log(\"uppercase clicked\");\r\n        let newText = Text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase successfully\",\"success\");\r\n    }\r\n    const handleLwCase =() => {\r\n        console.log(\"You have clicked on lowercase\");\r\n        let newText = Text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase successfully\",\"success\");\r\n    }\r\n    const handleClear =() =>{\r\n        console.log(\"You have clicked on clear text\");\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Cleared successfully\",\"success\");\r\n    }\r\n    const handleCopy =() =>{\r\n        console.log(\"You have clicked on copy text\");\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        props.showAlert(\"Text selected successfully\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpace =() =>{\r\n        console.log(\"You have clicked on Extra Space\");\r\n        let newText = Text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed extra space successfully\",\"success\");\r\n    }\r\n\r\n    const handleOnChange =(event) => {\r\n        console.log(\"On Changed\");\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    // Declare a new state variable, which we'll call \"count\"\r\n    const [Text, setText] = useState('');\r\n    return ( \r\n        <>\r\n        <div className=\"container\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" value={Text} onChange={handleOnChange} id=\"myBox\" rows=\"3\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpCase}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLwCase}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        </div>\r\n        <div className=\"container\">\r\n            <h1>Your text summary</h1>\r\n            <p>{Text.split(\" \").length} words and {Text.length} characters</p>\r\n            <p>{0.008 *Text.split(\" \").length} minutes read</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capatialize =(word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            {capatialize(props.alert.type)}:{props.alert.msg} \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div classNameName=\"container\">\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button classNameName=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" classNameName=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" classNameName=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button>Enable dark mode</button>\r\n  </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () =>{\n    if(mode === 'light'){\n      setMode('dark');\n    }\n    else\n    {\n      setMode('light');\n    }\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"Textutils\" mode = {mode} toggleMode={toggleMode}/>\n      <Alert alert ={alert}/>\n      <div className=\"container\">\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          <TextForm showAlert={showAlert} heading = \"Enter text to analyze\"/>\n          </Route>\n        </Switch>\n      </div>\n  </Router>\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}